searchState.loadedDescShard("simple_kv", 0, "用于主题发布和订阅的数据结构\n来自客户端的命令请求\n服务器的响应\n对 Command 的处理的抽象\n处理 Frame 的 encode/decode\n从 table 中删除一个 key，返回它之前的值\n查看 key 是否存在\n从 table 中获取一个 key，返回 value\n从 table 中获取所有的 Kvpair\n从 table 中删除一组 key，返回它们之前的值\n查看一组 key 是否存在\n从 table 中获取一组 key，返回它们的 value\n往 table 中存一组 kvpair， 如果 table …\n往 table 里存一个 kvpair， 如果 table …\n返回的 kvpair\n使用 DashMap 构建的 MemTable，实现了 Storage trait\n事件通知（不可变事件）\n事件通知（可变事件）\n处理客户端 socket 的读写\n处理服务器端的某个 accept 下来的 socket …\n处理 KV server prost frame 的 stream\n发布数据到某个主题\nService 数据结构\nService 内部数据结构\n…\n提供 Storage iterator，这样 trait …\n创建时之间取得 subscription id，并使用 …\nsubscribe …\n存放 TLS Client 并提供方法 connect …\n存放 TLS ServerConfig 并提供方法 accept …\n取消对某个主题的订阅\n返回的值\nYamux 控制结构\n触发 TLS 协议，把底层的 stream 转换成 TLS …\nNested message and enum types in <code>CommandRequest</code>.\n触发 TLS 协议，把底层的 stream 转换成 TLS …\n查看 HashTable 中是否有 key\n把一个完整的 frame decode 成一个 Message\n把一个完整的 frame decode 成一个 Message\n从 HashTable 中删除一个 key\n从 Request 中得到 Response，目前处理所有 …\n从 Request 中得到 Response，目前处理所有 …\n把一个 Message encode 成一个 frame\n把一个 Message encode 成一个 frame\n处理 Command，返回 Response\n处理 Command，返回 Response\n转换成 string 做错误处理\n转换成 string 做错误处理\n转换成 string 做错误处理\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n从一个 HashTable 里获取一个 key 的 value\n遍历 HashTable，返回所有 kv …\n遍历 HashTable，返回 kv pair 的 Iterator\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n如果不是 2xx，message 里包含详细的信息\n创建一个 ProstStream\n加载 server cert / CA cert，生成 ServerConfig\n加载 client cert / CA cert，生成 ClientConfig\n创建一个新的 kv pair\n创建一个缺省的 MemTable\n创建 yamux 客户端\n创建 yamux 服务端，服务端我们需要具体处理 …\n成功返回的 kv pairs\n往主题里发布一个数据\n从 stream 中读取一个完整的 frame\n从一个 HashTable 里设置一个 key 的 …\n通过配置创建 KV 服务器\n通过配置创建 KV 客户端\n状态码；复用 HTTP 2xx/4xx/5xx 状态码\n订阅某个主题\n取消对主题的订阅\nNested message and enum types in <code>Value</code>.\n成功返回的 values\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …")